org: khaosdoctor
app: alura-serverless
service: api
frameworkVersion: '3'

params:
  default:
    dbName: alura-serverless
  dev:
    connectionString: mongodb://localhost:27017/${self:params.default.dbName}
    salt: SJxV9oNKRtEks8un3W3jUZSkHwrxBOdZ
    jwtSecret: UkBN0me9JRvODL8Olb9iszmWxuOYt74OJEeTfFtiajbTScOGL6iFcMjepagitemzj4DqbHtKV6JokQpdZg8u96EHRUklWoQV3HjSm2PlQdC8hekOlSUWZPTjcMn8DvHdFwkkG7FC63N9yRnHQwAPNuNXNWZfoXlZZNbwirr2t7LLUV5rw9uE8CBEghVQt1KWH9284t5RxmVBtDpSSOs3rITMj6Sh8L9m2tu0KwGszdH45Scl2rce4RIS9Qr8fYS3
  prod:

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-1
  environment:
    MONGODB_CONNECTIONSTRING: ${param:connectionString}
    MONGODB_DB_NAME: ${param:dbName}
    JWT_SECRET: ${param:jwtSecret}
    SALT: ${param:salt}

functions:
  sendResponse:
    handler: api/handlers.sendResponse
    events:
      - httpApi:
          path: /api/results
          method: post
          # Validação de schema para o body da requisição
          # request:
            # schemas:
              # application/json: ${file(./schemas/sendResponse.json)}
plugins:
  - serverless-offline
